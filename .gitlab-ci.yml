# custom docker image based off the stock php one, includes Drupal dependencies and testing dependencies
# see details here: https://github.com/smmccabe/docker/blob/master/Dockerfile
image: smmccabe/drupal:latest
#image: smmccabe/drupal:php7
#image: smmccabe/drupal:php5.6

variables:
  MYSQL_DATABASE: drupal
  MYSQL_SQL_TO_RUN: 'GRANT ALL ON *.* TO "testrunner"@"%";'
  MYSQLD_RAM_SIZE: '1024'

# jobs do not need to be present for all stages, if a stage has no jobs it will just be ignored
stages:
  - test
  - build
  - deploy

code_standards:
  stage: test
  when: manual
  script:
    # runs the Drupal code standards checks on our custom code
    # the Drupal Code Standards come from the Coder module, which is automatically part of the base testing image
    - phpcs --standard=Drupal -n --extensions=php,module,inc,install,test,profile,theme,css,info,txt,md web/modules/custom
    - phpcs --standard=Drupal -n --extensions=php,module,inc,install,test,profile,theme,css,info,txt,md web/themes/custom

#DRUPAL 8
custom_tests_d8:
  stage: test
  when: manual

  services:
  - theasci/docker-mysql-tmpfs:latest

  script:
    #apache should be running by default, and does on my local, but gitlabci
    # prevents that for some reason, so we manually start it
    # the & is important so it doesn't block everything below it from running.
    - apache2-foreground > /dev/null 2>&1 &

    # move to the webroot
    - cp . /var/www/html/ -rf
    - cd /var/www/html

    # if you have issues with rate limiting, you'll want to setup a github key variable and uncomment the config line below
    # https://getcomposer.org/doc/articles/troubleshooting.md#api-rate-limit-and-oauth-tokens
    #- composer config -g github-oauth.github.com $DEPLOY_GITHUB

    - composer install

    #install the drupal site provided by the docker image so we can use it for testing
    - cd web
    - drush site-install standard --db-url='mysql://testrunner:@theasci__docker-mysql-tmpfs/drupal' -y

    - export SIMPLETEST_DB='mysql://testrunner:@theasci__docker-mysql-tmpfs/drupal'
    - export SIMPLETEST_BASE_URL=http://localhost
    - export BROWSERTEST_OUTPUT_DIRECTORY=/tmp
    #- ../vendor/phpunit/phpunit/phpunit -c core/phpunit.xml.dist --group SITENAME
    - echo 'No custom unit tests currently, edit config if they are added'

# for building SASS files, remove if you don't use SASS
# paths default to D8, but we do use SASS on a few D7 sites, so adjust accordingly
build:
  stage: build

  # this tells the build server to save these files between jobs, this keeps them to be deployed
  artifacts:
    paths:
      - bin
      - vendor
      - web
      - web/themes/custom/commerce_2_demo/css

  script:
    - composer install --no-interaction --no-dev
    - cd web/themes/custom/commerce_2_demo
    - echo $PWD
    - ls -laF ./
    - npm install
    - gulp sass

# example deploy for dev, copy and replace with different servers as needed
deploy-uat:
  stage: deploy

  #add any other tags or branches you want here
  only:
    - master

  environment: uat

  script:
    # Install ssh-agent if not already installed, it is required by Docker
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$DEPLOY_KEY_UAT")

    # For Docker builds disable host key checking. Be aware that by adding that
    # you are susceptible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    #move updated files up to deployment server, exclude .git since it's not needed
    - rsync -av --no-perms --no-owner --no-group --exclude '.git' /builds/accounts/commerce-2-demo/ commerce-2-demo@aws1.acrobuild.com:/home/commerce-2-demo/www/commerce-2-demo/

    # log into the site and flush cache
    - ssh commerce-2-demo@aws1.acrobuild.com 'cd www/commerce-2-demo && composer install'
