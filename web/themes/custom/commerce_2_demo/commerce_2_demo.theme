<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\node\NodeInterface;
use Drupal\commerce_product\Entity\ProductAttributeValue;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\commerce_product\Entity\Product;
use Drupal\commerce_order\Entity;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\user\Entity\User;
use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\commerce_product\Entity\ProductVariationInterface;
use Drupal\commerce_product\Event;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\commerce_product\Plugin\Field\FieldWidget\ProductVariationAttributesWidget;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\EntityManagerInterface;
use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
use Drupal\Core\Entity\EntityTypeManager;
use Drupal\comment\Entity\Comment;

use Drupal\commerce_stock_local;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds template suggestions.
 */
function commerce_2_demo_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    if ($node instanceof NodeInterface) {
      array_splice($suggestions, 1, 0, 'page__type__' . $node->getType());
    }
  }

  // Add taxonomy vocabulary suggestions.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    $vocabulary_id = $term->getVocabularyId();
    array_splice($suggestions, 1, 0, 'page__taxonomy__' . $term->getVocabularyId());
  }

  // Add page path alias suggestions.
  $page_current_path = \Drupal::service('path.current')->getPath();

  if (!empty($page_current_path)) {
    $page_current_alias = \Drupal::service('path.alias_manager')
      ->getAliasByPath($page_current_path);
  }
  if (!empty($page_current_alias)) {
    $search_for = '/';
    $page_current_alias = str_replace('-', '_', $page_current_alias);
    $pos_page_current_alias = strpos($page_current_alias, $search_for);

    if ($pos_page_current_alias !== FALSE) {
      $page_current_alias_formatted = substr_replace($page_current_alias, '', $pos_page_current_alias, strlen($search_for));
      $page_current_alias_formatted = str_replace('/', '__', $page_current_alias_formatted);
    }
    if ($page_current_alias_formatted) {
      array_splice($suggestions, 1, 0, 'page__' . $page_current_alias_formatted);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Add body classes if certain regions have content.
 */
function commerce_2_demo_preprocess_html(&$variables) {
  // Page title variable.
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  if ($title && is_string($title)) {
    $variables['page_title'] = $title;
  }

  // Current path variable.
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  // Taxonomy term variables.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    // Set variable for taxonomy term's vocabulary.
    $variables['term_vocabulary'] = $term->getVocabularyId();

    // Set variable for taxonomy term's name.
    $variables['term_name'] = $term->getName();
  }
}

/**
 * Implements hook_theme_suggestions_block_alter(array &$suggestions, array $variables).
 */
function commerce_2_demo_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block theme suggestions for custom block types.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__type__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_block(&$variables).
 */
function commerce_2_demo_preprocess_block(&$variables) {
  // Set bundle variable for custom blocks.
  if (isset($variables['elements']['content']['#block_content']) && $bundle = $variables['elements']['content']['#block_content']->bundle()) {
    $variables['bundle'] = $bundle;
  }
}

/**
 * Implements hook_preprocess_comment_HOOK() for Comments.
 */
function commerce_2_demo_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];

  $variables['created'] = t('@comment_date at @comment_time', [
    '@comment_date' => \Drupal::service('date.formatter')->format($comment->getCreatedTime(), 'custom', 'F j, Y'),
    '@comment_time' => \Drupal::service('date.formatter')->format($comment->getCreatedTime(), 'custom', 'g:i a')
  ]);
}

/**
 * Implements hook_preprocess_node(&$variables).
 */
function commerce_2_demo_preprocess_node(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];

    // Base path variable.
    $variables['base_path'] = base_path();

    // Absolute path variable.
    $node_absolute_url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE])->toString();
    $variables['absolute_path'] = $node_absolute_url;

    // Encoded fields for social media sharing.
    $node_absolute_encoded_url = urlencode($node_absolute_url);
    $variables['absolute_encoded_path'] = $node_absolute_encoded_url;

    $encoded_title = rawurlencode($node->title->value);
    $variables['encoded_title'] = $encoded_title;

    // Page.
    if ($node->getType() === 'page') {
      // Page Header Image.
      if (isset($node->field_page_header_image->entity)) {
        $variables['page_header_image_url'] = ImageStyle::load('banner')->buildUrl($node->field_page_header_image->entity->getFileUri());
      }
    }

    // Homepage Carousel Slide.
    if ($node->getType() === 'homepage_carousel_slide') {
      // Image.
      if (isset($node->field_carousel_slide_image->entity)) {
        $variables['slide_image_url'] = ImageStyle::load('homepage_carousel_slide_image')->buildUrl($node->field_carousel_slide_image->entity->getFileUri());
        $variables['slide_mobile_image_url'] = ImageStyle::load('homepage_carousel_slide_image_mobile')->buildUrl($node->field_carousel_slide_image->entity->getFileUri());
      }
      // Mobile image.
      if (isset($node->field_carousel_slide_image_sml->entity)) {
        $variables['slide_mobile_image_url'] = ImageStyle::load('homepage_carousel_slide_image_mobile')->buildUrl($node->field_carousel_slide_image_sml->entity->getFileUri());
      }
    }

    // Blog Post.
    if ($node->getType() === 'blog_post') {
      // User.
      if (isset($node->get('uid')->entity)) {
        $blog_author_id = $node->get('uid')->entity->id();
        $blog_author_name = $node->get('uid')->entity->getUsername();

        $variables['blog_author_id'] = $blog_author_id;
        $variables['blog_author_name'] = $blog_author_name;
      }

      // Date.
      if (!empty($node->field_post_date)) {
        $post_date = strtotime($node->field_post_date->value);
        $variables['blog_post_date'] = \Drupal::service('date.formatter')->format($post_date, 'custom', 'M j, Y');
      }

      // Image.
      if (isset($node->field_blog_image->entity)) {
        $variables['blog_image_url'] = ImageStyle::load('banner')->buildUrl($node->field_blog_image->entity->getFileUri());
      }
    }

    // Image Gallery.
    if ($node->getType() === 'image_gallery') {
      if (isset($node->field_gallery_image->entity)) {
        $field_gallery_image = $node->field_gallery_image;

        // Create array to push field data into.
        $image_gallery_images = [];

        foreach ($field_gallery_image as $key => $image) {
          // Image.
          $image_gallery_images[$key]['image_gallery_image_url'] = ImageStyle::load('image_gallery_image')->buildUrl($image->entity->getFileUri());
          // Image thumbnail.
          $image_gallery_images[$key]['image_gallery_thumb_url'] = ImageStyle::load('image_gallery_thumb')->buildUrl($image->entity->getFileUri());
          // Image title.
          if (!empty($image->title)) {
            $image_gallery_images[$key]['title'] = $image->title;
          }
          // Image alt.
          $image_gallery_images[$key]['alt'] = $image->alt;
        }

        $variables['image_gallery'] = $image_gallery_images;
      }
    }
  }
}

/**
 * Implements hook_preprocess_page(&$variables).
 */
function commerce_2_demo_preprocess_page(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  // Homepage.
  if ($is_front_page = \Drupal::service('path.matcher')->isFrontPage()) {
    // Homepage carousel view.
    $homepage_carousel_view_name = 'homepage_carousel';
    $homepage_carousel_view_display = 'default';
    $homepage_carousel_view_results = views_get_view_result($homepage_carousel_view_name, $homepage_carousel_view_display);
    $result = count($homepage_carousel_view_results);
    // Set variable if the view has results.
    if ($result) {
      $variables['homepage_carousel_view'] = views_embed_view($homepage_carousel_view_name, $homepage_carousel_view_display);
    }
  }

  // Node.
  if (isset($variables['node'])) {
    $node = $variables['node'];
  }
}

/**
 * Implements hook_preprocess_taxonomy_term(&$variables).
 */
function commerce_2_demo_preprocess_taxonomy_term(&$variables) {
  if (isset($variables['term'])) {
    $term = $variables['term'];

    // Set base path variable.
    $variables['base_path'] = base_path();
  }
}

/**
 * Implements hook_theme($existing, $type, $theme, $path).
 */
function commerce_2_demo_theme($existing, $type, $theme, $path) {
  return [
    'add_to_cart_form__uh_axe' => [
      'render element' => 'form',
      'path' => $path . '/templates/commerce',
    ],
  ];
}

/**
 * Implements hook_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id).
 */
function commerce_2_demo_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Comment form.
  if (($form_id == 'comment_node_comment_form') || ($form_id == 'comment_product_reviews_form')) {
    // Update submit button text.
    $form['actions']['submit']['#value'] = t('Post Comment');
  }

  // Commerce Add to Cart form.
  if ((strpos($form_id, 'commerce_order_item_add_to_cart_form_commerce_product_') === 0)) {
    // Check for existing variation.
    if (isset($form['purchased_entity']['widget'][0]['variation']['#value'])) {
      // Set data attribute for the product variation id.
      $product_variation_id = $form['purchased_entity']['widget'][0]['variation']['#value'];
      $form['#attributes']['data-product-variation-id'] = $product_variation_id;
    }

    // General attribute title changes.
    $form['purchased_entity']['widget'][0]['attributes']['attribute_size']['#title'] = t('Size');
    $form['purchased_entity']['widget'][0]['attributes']['attribute_size_shoe']['#title'] = t('Size');

    // UH+ General attribute title changes.
    $form['purchased_entity']['widget'][0]['attributes']['attribute_uh_axe_length']['#title'] = t('Length');
    $form['purchased_entity']['widget'][0]['attributes']['attribute_uh_axe_weight']['#title'] = t('Head Weight');
    $form['purchased_entity']['widget'][0]['attributes']['attribute_uh_axe_finish']['#title'] = t('Handle Finish');

    // Get product type (bundle) from storage.
    $storage = &$form_state->getStorage();
    $product_bundle = $storage['product']->bundle();
    $form['#product_bundle'] = $product_bundle;

    // UH Axe.
    if ($product_bundle == 'uh_axe') {
      // Set theme hook.
      $form['#theme'][] = 'add_to_cart_form__uh_axe';

      // Get length attribute and set template variable.
      $uh_axe_length = [];
      $uh_axe_length_key = 0;
      foreach ($form['purchased_entity']['widget'][0]['attributes']['attribute_uh_axe_length']['#options'] as $key => &$option) {
        $attribute = ProductAttributeValue::load($key);
        $uh_axe_length[$uh_axe_length_key] = $attribute;
        $uh_axe_length_key++;
      }
      $form['#uh_axe_length'] = $uh_axe_length;

      // Get weight attribute and set template variable.
      $uh_axe_weight = [];
      $uh_axe_weight_key = 0;
      foreach ($form['purchased_entity']['widget'][0]['attributes']['attribute_uh_axe_weight']['#options'] as $key => &$option) {
        $attribute = ProductAttributeValue::load($key);
        $uh_axe_weight[$uh_axe_weight_key] = $attribute;
        $uh_axe_weight_key++;
      }
      $form['#uh_axe_weight'] = $uh_axe_weight;

      // Load the default variation and set template variable.
      $default_selected_variation_id = $form['purchased_entity']['widget'][0]['variation']['#value'];
      $default_selected_variation = \Drupal::entityTypeManager()->getStorage('commerce_product_variation')->load($default_selected_variation_id);
      $form['#product_variation'] = $default_selected_variation;

      // Use NEW default variation setting if user selects one.
      // NOTE: We can't change the default in the preprocess here. Instead, we set attribute ID variables and do the rest with jQuery.
      // TODO: Do this in a module instead.
      if (!empty($storage['product']->field_default_selected_variation->getValue())) {
        // Get variation ID and set variables.
        $field_default_selected_variation = $storage['product']->field_default_selected_variation->getValue();
        $default_selected_variation_id = $field_default_selected_variation[0]['target_id'];
        $form['#default_variation_id'] = $default_selected_variation_id;
      }

      // Bundle products.
      if (!empty($storage['product']->field_bundled_products->getValue())) {
        $form['#bundle_available'] = 'yes';

        // Get the bundled product values.
        $form['#field_bundled_products'] = $storage['product']->field_bundled_products->getValue();

        // Add include bundled products selector to form.
        $form['include_bundle'] = [
          '#type' => 'radios',
          '#title' => t('UH Sheath'),
          '#default_value' => 1,
          '#options' => [
            0 => t('No'),
            1 => t('Yes +$80.00'),
          ],
        ];

        // Add custom form submit handler function to add bundled products to the cart.
        $form['actions']['submit']['#submit'][] = 'commerce_2_demo_bundled_add_to_cart_submit';
      }
    }

    // UH Recurring Digital.
    if ($product_bundle == 'uh_recurring_digital') {

      // Do stuff.

    }
  }

  // Commerce Cart page form.
  if ((strpos($form_id, 'views_form_commerce_cart_form_default_') === 0)) {
    // Check for results.
    if (isset($form['output'][0]['#rows'][0])) {
      // Get order id.
      $order_id = $form['output'][0]['#rows'][0]->order_id;
      // Set data attribute for the order id.
      $form['#attributes']['data-order-id'] = $order_id;

      if (isset($form['output'][0]['#rows'][0]->_entity)) {
        // Get order type entity.
        $order_type = $form['output'][0]['#rows'][0]->_entity->type->getValue();
        // Set data attribute and class for the order type.
        $form['#attributes']['data-order-type'] = $order_type[0]['target_id'];
        $form['#attributes']['class'] = "order-type-" . $order_type[0]['target_id'];
      }
    }
  }

  // Commerce Cart block form.
  if ((strpos($form_id, 'views_form_commerce_cart_block_default_') === 0)) {

    // Check for results.
    if (isset($order_type[0]['target_id'])) {
      // Get order id.
      $order_id = $order_type[0]['target_id'];
    }

    // Check for results.
    if (isset($form['output'][0]['#rows'][0])) {
      // Get order id.
      $order_id = $form['output'][0]['#rows'][0]->order_id;
      // Set data attribute for the order id.
      $form['#attributes']['data-order-id'] = $order_id;

      if (isset($form['output'][0]['#rows'][0]->_entity)) {
        // Get order type entity.
        $order_type = $form['output'][0]['#rows'][0]->_entity->type->getValue();
        // Set data attribute for the order type.
        $form['#attributes']['data-order-type'] = $order_type[0]['target_id'];
      }
    }
  }

  // Store - Product Catalog view exposed form.
  if ($form['#id'] == 'views-exposed-form-products-page-1') {
    $current_path = \Drupal::request()->getRequestUri();

    // If current path is within /products, correct the form action path.
    if ((strpos($current_path, '/products') === 0)) {
      // Fix for views using facets with pretty paths enabled.
      // Replace form action with current path to maintain active facets.
      $form['#action'] = $current_path;
    }
  }
}

/**
 * Custom checkout form submit handler function ($form, $form_state).
 */
function commerce_2_demo_bundled_add_to_cart_submit($form, FormStateInterface $form_state) {
  // Get values from form and check if bundled products are to be included.
  $form_values = $form_state->getValues();
  if ($form_values['include_bundle'] === '1') {
    // Loop through bundled products.
    foreach ($form['#field_bundled_products'] as $bundled_product) {
      // Set some useful variables.
      $store_id = 1;
      $order_type = 'default';
      $variation_id = $bundled_product['target_id'];
      $entity_manager = \Drupal::entityTypeManager();
      $cart_manager = \Drupal::service('commerce_cart.cart_manager');
      $cart_provider = \Drupal::service('commerce_cart.cart_provider');

      // Following line is the same as Drupal\commerce_store\Entity\Store::load($store_id);
      // Load the store and variation.
      $store = $entity_manager->getStorage('commerce_store')->load($store_id);
      $product_variation = $entity_manager->getStorage('commerce_product_variation')->load($variation_id);

      // We must know if there is already a cart for the provided order type and store.
      $cart = $cart_provider->getCart($order_type, $store);
      if (!$cart) {
        $cart = $cart_provider->createCart($order_type, $store);
      }

      // Create a new order item.
      $order_item = $entity_manager->getStorage('commerce_order_item')->create([
        'type' => 'default',
        'purchased_entity' => (string) $variation_id,
      // Amount or quantity to be added to the cart.
        'quantity' => 1,
        'unit_price' => $product_variation->getPrice(),
      ]);
      $order_item->save();

      // Now add order item to the cart.
      $cart_manager->addOrderItem($cart, $order_item);
    }
  }
}

/**
 * Implements hook_preprocess(&$variables, $hook).
 */
function commerce_2_demo_preprocess(&$variables, $hook) {
  // Commerce Product.
  if (isset($variables['elements']['#entity_type']) && $hook == 'commerce_product') {
    if (isset($variables['elements']['#commerce_product'])) {
      // Set base path variable.
      $variables['base_path'] = base_path();

      // Get view mode & assign variable.
      $view_mode = $variables['elements']['#view_mode'];
      $variables['view_mode'] = $view_mode;

      // Get product and variations.
      $product = $variables['elements']['#commerce_product'];
      $product_variations = $product->getVariations();

      // Product Images.
      if (isset($product->field_image->entity)) {
        // Create array to feed images into.
        $product_images = [];
      }
      if (isset($product->field_image->entity)) {
        foreach ($product->field_image as $key => &$product_image) {
          $product_images[$key]['variation_id'] = '';
          $product_images[$key]['images'][$key] = $product_image;
        }
      }

      // Product Variation Images.
      if (!empty($product_variations)) {
        // Loop through variations and create array to feed images
        // if the variation is active and contains an image.
        foreach ($product_variations as $variation) {
          if ($variation->status->value == '1') {
            if (isset($variation->field_image->entity)) {
              // Create array to feed images into.
              $product_variation_images = [];
              break;
            }
          }
        }

        foreach ($product_variations as $key => $variation) {
          // If variation is active.
          if ($variation->status->value == '1') {
            // If variation has an image.
            if (isset($variation->field_image->entity)) {
              $variation_id = $variation->variation_id->value;
              $product_variation_images[$key]['variation_id'] = $variation_id;

              foreach ($variation->field_image as $image_key => &$variation_image) {
                $product_variation_images[$key]['images'][$image_key] = $variation_image;
              }
            }
          }
        }
      }

      // Set product images variable combining both product images and variation images.
      if (isset($product_images) && isset($product_variation_images)) {
        $variables['product_variation_images'] = array_merge($product_variation_images, $product_images);
      }
      elseif (isset($product_variation_images)) {
        $variables['product_variation_images'] = $product_variation_images;
      }
      elseif (isset($product_images)) {
        $variables['product_variation_images'] = $product_images;
      }

      // Product reviews.
      if (isset($product->field_product_reviews)) {
        $field_product_reviews = $product->field_product_reviews->getValue();

        // Number of reviews (if there are reviews).
        if (isset($field_product_reviews[0]['comment_count'])) {
          $variables['product_reviews_count'] = $field_product_reviews[0]['comment_count'];
        }
        else {
          // Number of reviews (if none).
          $variables['product_reviews_count'] = 0;
        }

        // If a product has reviews, we average out the review ratings.
        if (isset($variables['elements']['field_product_reviews'][0]['comments'])) {
          $comments = $variables['elements']['field_product_reviews'][0]['comments'];
          $ratingSum = 0;
          $ratingCount = 0;
          $ratingAverage = 0;

          foreach ($comments as $comment) {
            if (is_array($comment) && isset($comment['#comment'])) {
              // Only adjust for first level comments, not replies.
              if ($comment['#comment']->hasParentComment() == FALSE) {
                $rating = $comment['#comment']->field_review_rating->value;
                $ratingSum += floatval($rating);
                $ratingCount++;
              }
            }
          }

          if ($ratingCount !== 0) {
            $ratingAverage = $ratingSum / $ratingCount;

            // Round to nearest half integer (ie 2, 2.5, 3, 3.5 etc).
            $ratingAverage = round($ratingAverage * 2) / 2;
          }

          // Set the variable for the product.
          $variables['rating_average'] = $ratingAverage;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_commerce_product_variation(&$variables).
 */
function commerce_2_demo_preprocess_commerce_product_variation(&$variables) {
  // Commerce Product Variation.
  if (isset($variables['elements']['#commerce_product_variation'])) {
    // Get view mode & assign variable.
    $view_mode = $variables['elements']['#view_mode'];
    $variables['view_mode'] = $view_mode;
  }
}

/**
 * Implements hook_preprocess_commerce_checkout_completion_message().
 */
function commerce_2_demo_preprocess_commerce_checkout_completion_message(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order_entity = $variables['order_entity'];
  $order_items = $order_entity->getItems();
  $variables['order_items'] = $order_items;
  $variables['order_type'] = $order_entity->type;
}

/**
 * Implements hook_preprocess_swiftmailer(&$variables).
 */
function commerce_2_demo_preprocess_swiftmailer(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  $variables['base_path'] = base_path();
  $variables['site_path'] = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
}
