<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\commerce_product\Entity\Product;
use Drupal\commerce_order\Entity;
use Drupal\Core\Entity\EntityTypeManagerInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Adds template suggestions.
 */
function commerce_2_demo_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__type__' . $node->getType());
  }

  // Add taxonomy vocabulary suggestions.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    $vocabulary_id = $term->getVocabularyId();
    array_splice($suggestions, 1, 0, 'page__taxonomy__' . $term->getVocabularyId());
  }

  // Add page path alias suggestions.
  $page_current_path = \Drupal::service('path.current')->getPath();

  if (!empty($page_current_path)) {
    $page_current_alias = \Drupal::service('path.alias_manager')
      ->getAliasByPath($page_current_path);
  }
  if (!empty($page_current_alias)) {
    $search_for = '/';
    $page_current_alias = str_replace('-', '_', $page_current_alias);
    $pos_page_current_alias = strpos($page_current_alias, $search_for);

    if ($pos_page_current_alias !== FALSE) {
      $page_current_alias_formatted = substr_replace($page_current_alias, '', $pos_page_current_alias, strlen($search_for));
      $page_current_alias_formatted = str_replace('/', '__', $page_current_alias_formatted);
    }
    if ($page_current_alias_formatted) {
      array_splice($suggestions, 1, 0, 'page__' . $page_current_alias_formatted);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Add body classes if certain regions have content.
 */
function commerce_2_demo_preprocess_html(&$variables) {
  // Page title variable.
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
  if ($title && is_string($title)) {
    $variables['page_title'] = $title;
  }

  // Current path variable.
  $current_path = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  // Taxonomy term variables.
  if ($term = \Drupal::request()->attributes->get('taxonomy_term')) {
    // Set variable for taxonomy term's vocabulary.
    $variables['term_vocabulary'] = $term->getVocabularyId();

    // Set variable for taxonomy term's name.
    $variables['term_name'] = $term->getName();
  }
}

/**
 * Implements hook_theme_suggestions_block_alter(array &$suggestions, array $variables).
 */
function commerce_2_demo_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block theme suggestions for custom block types.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__type__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_block(&$variables).
 */
function commerce_2_demo_preprocess_block(&$variables) {
  // Set bundle variable for custom blocks.
  if (isset($variables['elements']['content']['#block_content']) && $bundle = $variables['elements']['content']['#block_content']->bundle()) {
    $variables['bundle'] = $bundle;
  }
}

/**
 * Implements hook_preprocess_comment_HOOK() for Comments.
 */
function commerce_2_demo_preprocess_comment(&$variables) {
  $comment = $variables['elements']['#comment'];

  $variables['created'] = t('@comment_date at @comment_time', [
    '@comment_date' => \Drupal::service('date.formatter')->format($comment->getCreatedTime(), 'custom', 'F j, Y'),
    '@comment_time' => \Drupal::service('date.formatter')->format($comment->getCreatedTime(), 'custom', 'g:i a')
  ]);
}

/**
 * Implements hook_preprocess_node(&$variables).
 */
function commerce_2_demo_preprocess_node(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];

    // Base path variable.
    $variables['base_path'] = base_path();

    // Absolute path variable.
    $node_absolute_url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE])->toString();
    $variables['absolute_path'] = $node_absolute_url;

    // Encoded fields for social media sharing.
    $node_absolute_encoded_url = urlencode($node_absolute_url);
    $variables['absolute_encoded_path'] = $node_absolute_encoded_url;

    $encoded_title = rawurlencode($node->title->value);
    $variables['encoded_title'] = $encoded_title;

    // Page.
    if ($node->getType() === 'page') {
      // Page Header Image.
      if (isset($node->field_page_header_image->entity)) {
        $variables['page_header_image_url'] = ImageStyle::load('banner')->buildUrl($node->field_page_header_image->entity->getFileUri());
      }
    }

    // Homepage Carousel Slide.
    if ($node->getType() === 'homepage_carousel_slide') {
      // Image.
      if (isset($node->field_carousel_slide_image->entity)) {
        $variables['slide_image_url'] = ImageStyle::load('homepage_carousel_slide_image')->buildUrl($node->field_carousel_slide_image->entity->getFileUri());
        $variables['slide_mobile_image_url'] = ImageStyle::load('homepage_carousel_slide_image_mobile')->buildUrl($node->field_carousel_slide_image->entity->getFileUri());
      }
      // Mobile image.
      if (isset($node->field_carousel_slide_image_sml->entity)) {
        $variables['slide_mobile_image_url'] = ImageStyle::load('homepage_carousel_slide_image_mobile')->buildUrl($node->field_carousel_slide_image_sml->entity->getFileUri());
      }
      // Link URL.
      if (isset($node->field_carousel_slide_link->uri)) {
        $carousel_link = $node->field_carousel_slide_link->uri;
        $variables['slide_link_url'] = Url::fromUri($carousel_link);
      }
    }

    // Blog Post.
    if ($node->getType() === 'blog_post') {
      // User.
      if (isset($node->get('uid')->entity)) {
        $blog_author_id = $node->get('uid')->entity->id();
        $blog_author_name = $node->get('uid')->entity->getUsername();

        $variables['blog_author_id'] = $blog_author_id;
        $variables['blog_author_name'] = $blog_author_name;
      }

      // Date.
      if (!empty($node->field_post_date)) {
        $post_date = strtotime($node->field_post_date->value);
        $variables['blog_post_date'] = \Drupal::service('date.formatter')->format($post_date, 'custom', 'M j, Y');
      }

      // Image.
      if (isset($node->field_blog_image->entity)) {
        $variables['blog_image_url'] = ImageStyle::load('banner')->buildUrl($node->field_blog_image->entity->getFileUri());
      }
    }

    // Image Gallery.
    if ($node->getType() === 'image_gallery') {
      if (isset($node->field_gallery_image->entity)) {
        $field_gallery_image = $node->field_gallery_image;

        // Create array to push field data into.
        $image_gallery_images = [];

        foreach ($field_gallery_image as $key => $image) {
          // Image.
          $image_gallery_images[$key]['image_gallery_image_url'] = ImageStyle::load('image_gallery_image')->buildUrl($image->entity->getFileUri());
          // Image thumbnail.
          $image_gallery_images[$key]['image_gallery_thumb_url'] = ImageStyle::load('image_gallery_thumb')->buildUrl($image->entity->getFileUri());
          // Image title.
          if (!empty($image->title)) {
            $image_gallery_images[$key]['title'] = $image->title;
          }
          // Image alt.
          $image_gallery_images[$key]['alt'] = $image->alt;
        }

        $variables['image_gallery'] = $image_gallery_images;
      }
    }
  }
}

/**
 * Implements hook_preprocess_page(&$variables).
 */
function commerce_2_demo_preprocess_page(&$variables) {
  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  // Homepage.
  if ($is_front_page = \Drupal::service('path.matcher')->isFrontPage()) {
    // Homepage carousel view.
    $homepage_carousel_view_name = 'homepage_carousel';
    $homepage_carousel_view_display = 'default';
    $homepage_carousel_view_results = views_get_view_result($homepage_carousel_view_name, $homepage_carousel_view_display);
    $result = count($homepage_carousel_view_results);
    // Set variable if the view has results.
    if ($result) {
      $variables['homepage_carousel_view'] = views_embed_view($homepage_carousel_view_name, $homepage_carousel_view_display);
    }
  }

  // Node.
  if (isset($variables['node'])) {
    $node = $variables['node'];
  }
}

/**
 * Implements hook_preprocess_taxonomy_term(&$variables).
 */
function commerce_2_demo_preprocess_taxonomy_term(&$variables) {
  if (isset($variables['term'])) {
    $term = $variables['term'];

    // Set base path variable.
    $variables['base_path'] = base_path();
  }
}

/**
 * Implements hook_theme($existing, $type, $theme, $path).
 */
function commerce_2_demo_theme($existing, $type, $theme, $path) {
  return [
    'commerce_order_item_add_to_cart_form__ux_axe' => [
      'render element' => 'form',
      'path' => $path . '/templates/commerce',
    ],
  ];
}

/**
 * Implements hook_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id).
 */
function commerce_2_demo_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Comment form.
  if ($form_id == 'comment_node_comment_form') {
    // Update submit button text.
    $form['actions']['submit']['#value'] = t('Post Comment');
  }

  // Commerce Add to Cart form.
  if ((strpos($form_id,'commerce_order_item_add_to_cart_form_commerce_product_') === 0)) {
    // Access form storage
    $storage = &$form_state->getStorage();

    // Get product type (bundle).
    $product_bundle = $storage['product']->bundle();
    $form['#product_bundle'] = $product_bundle;

    // Check for specific uh_axe product type.
    if ($product_bundle == 'uh_axe') {
      // Set theme hook.
      $form['#theme'][] = 'commerce_order_item_add_to_cart_form__ux_axe';

      // Get length attribute and set template variable.
      $uh_axe_length = [];
      $uh_axe_length_key = 0;
      foreach ($form['purchased_entity']['widget'][0]['attributes']['attribute_uh_axe_length']['#options'] as $key => &$option) {
        $attribute = \Drupal\commerce_product\Entity\ProductAttributeValue::load($key);
        $uh_axe_length[$uh_axe_length_key] = $attribute;
        $uh_axe_length_key++;
      }
      $form['#uh_axe_length'] = $uh_axe_length;

      // Get weight attribute and set template variable.
      $uh_axe_weight = [];
      $uh_axe_weight_key = 0;
      foreach ($form['purchased_entity']['widget'][0]['attributes']['attribute_uh_axe_weight']['#options'] as $key => &$option) {
        $attribute = \Drupal\commerce_product\Entity\ProductAttributeValue::load($key);
        $uh_axe_weight[$uh_axe_weight_key] = $attribute;
        $uh_axe_weight_key++;
      }
      $form['#uh_axe_weight'] = $uh_axe_weight;

      // Get product variation id and load variation.
      $product_variation_id = $form['purchased_entity']['widget'][0]['variation']['#value'];
      $entity_manager = \Drupal::entityTypeManager();
      $product_variation = $entity_manager->getStorage('commerce_product_variation')->load($product_variation_id);

      // Variation Image
      if (isset($product_variation->field_image->entity)) {
        $field_image = $product_variation->field_image->entity;

        // Image.
        $form['#variation_field_image'] = $field_image;
        $form['#product_image_full_url'] = ImageStyle::load('uh_axe')->buildUrl($field_image->getFileUri());
        // Image thumbnail.
        $form['#product_image_thumb_url'] = ImageStyle::load('product_thumb')->buildUrl($field_image->getFileUri());
      }
    }
  }

  // Commerce Cart page form.
  if ((strpos($form_id, 'views_form_commerce_cart_form_default_') === 0)) {
    // Check for results.
    if (isset($form['output'][0]['#rows'][0])) {
      // Get order id.
      $order_id = $form['output'][0]['#rows'][0]->order_id;
      // Set data attribute for the order id.
      $form['#attributes']['data-order-id'] = $order_id;

      if (isset($form['output'][0]['#rows'][0]->_entity)) {
        // Get order type entity.
        $order_type = $form['output'][0]['#rows'][0]->_entity->type->getValue();
        // Set data attribute and class for the order type.
        $form['#attributes']['data-order-type'] = $order_type[0]['target_id'];
        $form['#attributes']['class'] = "order-type-" . $order_type[0]['target_id'];
      }
    }
  }

  // Commerce Cart block form.
  if ((strpos($form_id, 'views_form_commerce_cart_block_default_') === 0)) {

    // Check for results.
    if (isset($order_type[0]['target_id'])) {
      // Get order id.
      $order_id = $order_type[0]['target_id'];
    }

    // Check for results.
    if (isset($form['output'][0]['#rows'][0])) {
      // Get order id.
      $order_id = $form['output'][0]['#rows'][0]->order_id;
      // Set data attribute for the order id.
      $form['#attributes']['data-order-id'] = $order_id;

      if (isset($form['output'][0]['#rows'][0]->_entity)) {
        // Get order type entity.
        $order_type = $form['output'][0]['#rows'][0]->_entity->type->getValue();
        // Set data attribute for the order type.
        $form['#attributes']['data-order-type'] = $order_type[0]['target_id'];
      }
    }
  }
}

/**
 * Implements hook_preprocess(&$variables, $hook).
 */
function commerce_2_demo_preprocess(&$variables, $hook) {
  // Commerce Product.
  if (isset($variables['elements']['#entity_type']) && $hook == 'commerce_product') {
    if (isset($variables['elements']['#commerce_product'])) {
      // Set base path variable.
      $variables['base_path'] = base_path();

      // Get view mode & assign variable.
      $view_mode = $variables['elements']['#view_mode'];
      $variables['view_mode'] = $view_mode;

      // Get product and variations.
      $product = $variables['elements']['#commerce_product'];
      $product_variations = $product->getVariations();

      // Variation Image
      if (isset($product_variations[0]->field_image->entity)) {
        $field_image = $product_variations[0]->field_image->entity;

        // Image.
        $variables['product_image_full_url'] = ImageStyle::load('product_large')->buildUrl($field_image->getFileUri());
        // Image thumbnail.
        $variables['product_image_thumb_url'] = ImageStyle::load('product_thumb')->buildUrl($field_image->getFileUri());
      }

      // Product reviews.
      if (isset($product->field_product_reviews)) {
        $field_product_reviews = $product->field_product_reviews->getValue();

        // Number of reviews (if there are reviews).
        if (isset($field_product_reviews[0]['comment_count'])) {
          $variables['product_reviews_count'] = $field_product_reviews[0]['comment_count'];
        }
        else {
          // Number of reviews (if none).
          $variables['product_reviews_count'] = 0;
        }

        // If a product has reviews, we average out the review ratings.
        if (isset($variables['elements']['field_product_reviews'][0]['comments'])) {
          $comments = $variables['elements']['field_product_reviews'][0]['comments'];
          $ratingSum = 0;
          $ratingCount = 0;
          $ratingAverage = 0;

          foreach ($comments as $comment) {
            if (is_array($comment) && isset($comment['#comment'])) {
              $rating = $comment['#comment']->field_review_rating->value;
              $ratingSum += floatval($rating);
              $ratingCount++;
            }
          }

          if ($ratingCount !== 0) {
            $ratingAverage = $ratingSum / $ratingCount;

            // Round to nearest half integer (ie 2, 2.5, 3, 3.5 etc).
            $ratingAverage = round($ratingAverage * 2) / 2;
          }

          // Set the variable for the product.
          $variables['rating_average'] = $ratingAverage;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_commerce_checkout_completion_message().
 */
function commerce_2_demo_preprocess_commerce_checkout_completion_message(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order_entity = $variables['order_entity'];
  $order_items = $order_entity->getItems();
  $variables['order_items'] = $order_items;
  $variables['order_type'] = $order_entity->type;
}
