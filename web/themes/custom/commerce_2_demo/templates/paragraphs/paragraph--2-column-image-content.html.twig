{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% if content.field_unique_class|render|trim is not empty  %}
  {% set unique_class = paragraph.field_unique_class.value|striptags %}
{% endif %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    'paragraph--type--2-column-image-content',
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    unique_class ? unique_class,
  ]
%}

{% set image_position = 'paragraph--type--2-column-image-content__image-left' %}
{% set image_position_content = 'paragraph--type--2-column-image-content__content-right' %}
{% if content.field_image_position.0['#markup'] == 'Right' %}
  {% set image_position = 'col-sm-push-6 paragraph--type--2-column-image-content__image-right' %}
  {% set image_position_content = 'col-sm-pull-6 paragraph--type--2-column-image-content__content-left' %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="container">
        <div class="row row-eq-height">
          {% if content.field_image|render|trim is not empty  %}
          <div class="hidden-xs col-sm-6 {{ image_position }}" style="background-image: url({{ content.field_image.0['#markup'] }});"></div>
          <div class="col-xs-12 col-sm-6 {{ image_position_content }}" style="background-image: url({{ content.field_image.0['#markup'] }});">
          {% else %}
          <div class="col-xs-12 paragraph--type--2-column-image-content--full">
          {% endif %}
            <div class="paragraph--type--2-column-image-content__content">
              {% if content.field_heading|render|trim is not empty  %}
                <h2 class="paragraph-title">{{ content.field_heading }}</h2>
              {% endif %}
              {{ content.field_formatted_text }}
              {{ content.field_unlimited_cta_links }}
            </div>
          </div>
        </div>
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
