{#
/**
 * @file
 * Theme implementation for a Image + Content paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'component-image-content',
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% set row_style_attributes = create_attribute() %}
{% set body_attributes = create_attribute() %}

{% if paragraph.field_bg_color.color %}
  {% set bg_color = paragraph.field_bg_color.color %}
  {% set row_style_attributes = row_style_attributes.setAttribute('style', 'background-color: ' ~ bg_color ~ ';' ) %}
{% endif %}

{% block paragraph %}
  <div data-aos="fade-up"{{ attributes.addClass(classes) }}>
    <div class="component-image-content__container container-fluid">
      {% block content %}
        <div{{ row_style_attributes }} class="row">
          {% set col_class = 'col-md-6' %}
          {% set col2_class = 'col-md-6' %}
          {% if paragraph.field_content_layout.value and (paragraph.field_content_layout.value == '1_4') %}
            {% set col_class = 'col-md-3' %}
            {% set col2_class = 'col-md-9' %}
          {% elseif paragraph.field_content_layout.value and (paragraph.field_content_layout.value == '2_3') %}
            {% set col_class = 'col-md-4' %}
            {% set col2_class = 'col-md-8' %}
          {% endif %}
          {% if paragraph.field_alignment.value and (paragraph.field_alignment.value == 'right') %}
            {% if paragraph.field_content_layout.value and (paragraph.field_content_layout.value == '1_4') %}
              {% set col_class = 'col-md-3 col-md-push-9' %}
              {% set col2_class = 'col-md-9 col-md-pull-3' %}
            {% elseif paragraph.field_content_layout.value and (paragraph.field_content_layout.value == '2_3') %}
              {% set col_class = 'col-md-4 col-md-push-8' %}
              {% set col2_class = 'col-md-8 col-md-pull-4' %}
            {% else %}
              {% set col_class = 'col-md-6 col-md-push-6' %}
              {% set col2_class = 'col-md-6 col-md-pull-6' %}
            {% endif %}
          {% endif %}
          <div class="component-image-content__col {{ col_class }}">
            {% if content.field_image %}
              <div class="component-image-content__image">
                {{ content.field_image }}
              </div>
            {% endif %}
          </div>
          <div class="component-image-content__col {{ col2_class }}">
            {% if content.field_paragraphs_reference %}
              {% if paragraph.field_color.color %}
                {% set color_id = 'paragraph-' ~ paragraph.id.value ~ '-color' %}
                {% set body_attributes = body_attributes.setAttribute('id', color_id) %}
                {% set body_attributes = body_attributes.addClass('component-image-content__body--color-override') %}
                {% set tags = ['h1','h2','h3','h4','h5','h6','h7','h8','div','span','p','a','blockquote','ul','ol','label','table','tr','td','.base-accordion__header::before'] %}
                <style type="text/css">
                  {% for tag in tags %}#{{ color_id }} {{ tag }}{% if not loop.last %},{% endif %}{% endfor %} {
                    color: {{ paragraph.field_color.color }};
                  }
                </style>
              {% endif %}
              <div{{ body_attributes.addClass('component-image-content__body') }}>
                {{ content.field_paragraphs_reference }}
              </div>
            {% endif %}
          </div>
        </div>
      {% endblock %}
    </div>
  </div>
{% endblock paragraph %}
