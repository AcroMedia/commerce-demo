{#
/**
 * @file
 * Theme implementation for a Tabs paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'component-tabs',
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  ]
%}

{%
  set tab_classes = [
    'nav',
    'nav-tabs',
  ]
%}
{% set tabs_attributes = create_attribute() %}
{% set tabs_attributes = tabs_attributes.addClass(tab_classes) %}

{%
  set tab_content_classes = [
  'tab-content',
]
%}
{% set tabs_content_attributes = create_attribute() %}
{% set tabs_content_attributes = tabs_content_attributes.addClass(tab_content_classes) %}

{# Set langcode so we can reference it within entities. #}
{% set langcode = paragraph.get('langcode').value %}

{# Set tab layout. #}
{% if paragraph.field_tabs_layout.value == 'vertical' %}
  {% set attributes = attributes.addClass('component-tabs--vertical') %}
  {% set tabs_attributes = tabs_attributes.addClass('nav-tabs--vertical') %}
  {% set tabs_content_attributes = tabs_content_attributes.addClass('tab-content--vertical') %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      <div class="component-tabs__tabs">
        {# Tabs. #}
        <ul{{ tabs_attributes }} role="tablist">
          {% if paragraph.field_paragraphs_reference.0.target_id %}
            {% for tab in paragraph.field_paragraphs_reference %}
              {% set tab_entity = tab.entity.getTranslation(langcode) %}
              {% set tab_field_title = tab_entity.field_string %}
              {% set tab_id = tab_field_title.value|clean_class ~ '-' ~ tab_entity.id.value %}

              {# Set active tab if it's the first tab. #}
              {% if loop.first %}
                {% set tab_li_class = 'active' %}
              {% else %}
                {% set tab_li_class = '' %}
              {% endif %}

              <li role="presentation" class="{{ tab_li_class }}">
                <a href="#{{ tab_id }}" aria-controls="{{ tab_id }}" role="tab" data-toggle="tab">
                  {{ tab_field_title|view }}
                </a>
              </li>
            {% endfor %}
          {% endif %}
        </ul>
        {# Tab Content. #}
        <div{{ tabs_content_attributes }}">
          {% if paragraph.field_paragraphs_reference.0.target_id %}
            {% for tab in paragraph.field_paragraphs_reference %}
              {% set tab_entity = tab.entity.getTranslation(langcode) %}
              {% set tab_field_title = tab_entity.field_string %}
              {% set tab_field_body = tab_entity.field_text_long %}
              {% set tab_id = tab_field_title.value|clean_class ~ '-' ~ tab_entity.id.value %}

              {# Set active tab if it's the first tab. #}
              {% if loop.first %}
                {% set tab_class = 'tab-pane fade active in' %}
              {% else %}
                {% set tab_class = 'tab-pane fade' %}
              {% endif %}

              <div role="tabpanel" class="{{ tab_class }}" id="{{ tab_id }}">
                <h2 class="tab-pane__title">{{ tab_field_title|view }}</h2>
                {{ tab_field_body|view }}
              </div>
            {% endfor %}
          {% endif %}
        </div>
        {# / Tab Content. #}
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
